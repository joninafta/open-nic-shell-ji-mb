#!/bin/bash
# Unified build and simulation script for filter_rx_pipeline
# Usage: ./sim [clean|help]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
REPO_ROOT="$(cd "$PROJECT_DIR/../../../.." && pwd)"

# Print functions
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

show_usage() {
    echo "Usage: $0 [clean|help|verbose]"
    echo ""
    echo "Commands:"
    echo "  (no args) - Build and run simulation"
    echo "  verbose   - Run simulation with detailed packet printing"
    echo "  clean     - Clean build artifacts"
    echo "  help      - Show this help"
    echo ""
    echo "Uses Verilator for simulation"
}

# Clean function
clean_artifacts() {
    print_info "Cleaning build artifacts..."
    cd "$PROJECT_DIR"
    rm -rf obj_dir/
    rm -rf sim_build/
    rm -rf scripts/__pycache__/
    rm -rf scripts/.pytest_cache/
    rm -f sim_tb sim_verilator
    rm -f *.vcd *.fst *.log *.lxt *.out
    rm -f results.xml dump.vcd
    print_success "Clean complete"
}

# Check if required files exist
check_files() {
    local missing=0
    local files=(
        "src/filter_rx_pipeline.sv"
        "tb/filter_rx_pipeline_tb.sv"
        "tb/packet_generator.sv"
        "tb/packet_sink.sv"
        "../common/cfg_reg_pkg.sv"
        "../common/packet_pkg.sv"
        "../../../../src/utility/axi_stream_register_slice.sv"
    )
    
    print_info "Checking source files..."
    cd "$PROJECT_DIR"
    
    for file in "${files[@]}"; do
        if [[ ! -f "$file" ]]; then
            print_error "Missing file: $file"
            missing=1
        fi
    done
    
    if [[ $missing -eq 1 ]]; then
        print_error "Some required files are missing"
        exit 1
    fi
    
    print_success "All source files found"
}

# Try Verilator simulation
try_verilator() {
    local verbose_mode=${1:-0}
    
    if ! command -v verilator &> /dev/null; then
        return 1
    fi
    
    print_info "Building with Verilator..."
    cd "$PROJECT_DIR"
    
    # Check if we have sim_main.cpp
    if [[ ! -f "scripts/sim_main.cpp" ]]; then
        print_warning "No sim_main.cpp found, creating simple one..."
        cat > scripts/sim_main.cpp << 'EOF'
#include <iostream>
#include <verilated.h>
#include "Vfilter_rx_pipeline_tb.h"

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);
    Vfilter_rx_pipeline_tb* tb = new Vfilter_rx_pipeline_tb;
    
    while (!Verilated::gotFinish()) {
        tb->eval();
    }
    
    delete tb;
    return 0;
}
EOF
    fi
    
    # Add compile defines for verbose mode
    local verbose_flags=""
    if [[ $verbose_mode -eq 1 ]]; then
        verbose_flags="-DVERBOSE_PACKET_PRINT=1"
        print_info "Enabling verbose packet printing"
    fi
    
    # Try Verilator compilation
    verilator --cc --exe --build --timing \
        -Wno-DECLFILENAME -Wno-IMPORTSTAR -Wno-GENUNNAMED -Wno-VARHIDDEN \
        -Wno-TIMESCALEMOD -Wno-WIDTHEXPAND -Wno-WIDTHTRUNC -Wno-UNUSEDSIGNAL \
        -Wno-UNUSEDPARAM -Wno-CASEINCOMPLETE -Wno-BLKSEQ -Wno-SYNCASYNCNET \
        -Wno-IMPLICITSTATIC \
        $verbose_flags \
        -I../common \
        -I../../../../src \
        -I../src \
        -I../tb \
        --top-module filter_rx_pipeline_tb \
        ../common/cfg_reg_pkg.sv \
        ../common/packet_pkg.sv \
        ../../../../src/utility/axi_stream_register_slice.sv \
        src/filter_rx_pipeline.sv \
        tb/packet_generator.sv \
        tb/packet_sink.sv \
        tb/filter_rx_pipeline_tb.sv \
        scripts/sim_main.cpp \
        -o sim_verilator
    
    if [[ $? -eq 0 ]]; then
        print_success "Verilator compilation successful"
        print_info "Running simulation..."
        ./obj_dir/sim_verilator
        return $?
    else
        print_warning "Verilator compilation failed"
        return 1
    fi
}

# Main execution
main() {
    local VERBOSE_MODE=0
    
    case "${1:-}" in
        clean)
            clean_artifacts
            exit 0
            ;;
        help|-h|--help)
            show_usage
            exit 0
            ;;
        verbose)
            print_info "Running in verbose mode with detailed packet printing"
            VERBOSE_MODE=1
            ;;
        "")
            # Normal build and run
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
    
    print_info "Filter RX Pipeline Testbench"
    print_info "Project: $PROJECT_DIR"
    if [[ $VERBOSE_MODE -eq 1 ]]; then
        print_info "Verbose mode: Detailed packet information will be printed"
    fi
    
    check_files
    
    # Build and run with Verilator
    if try_verilator $VERBOSE_MODE; then
        print_success "Simulation completed successfully with Verilator"
    else
        print_error "Verilator simulation failed"
        if ! command -v verilator &> /dev/null; then
            print_error "Verilator not found. Please install Verilator to run simulations."
        fi
        exit 1
    fi
}

# Run main function with all arguments
main "$@"
